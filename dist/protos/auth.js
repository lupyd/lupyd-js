"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: auth.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogoutTokens = exports.LogoutToken = exports.LoggedInApps = exports.LoggedInApp = exports.ThirdPartyLoginResponse = exports.NewLoginThirdPartyRequest = exports.NewAppRequest = exports.TokenRequest = exports.UserTokens = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "lupyd.auth";
function createBaseUserTokens() {
    return { accessToken: "", refreshToken: "" };
}
exports.UserTokens = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accessToken !== "") {
            writer.uint32(10).string(message.accessToken);
        }
        if (message.refreshToken !== "") {
            writer.uint32(18).string(message.refreshToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserTokens();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.accessToken = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.refreshToken = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
            refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accessToken !== "") {
            obj.accessToken = message.accessToken;
        }
        if (message.refreshToken !== "") {
            obj.refreshToken = message.refreshToken;
        }
        return obj;
    },
    create(base) {
        return exports.UserTokens.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUserTokens();
        message.accessToken = object.accessToken ?? "";
        message.refreshToken = object.refreshToken ?? "";
        return message;
    },
};
function createBaseTokenRequest() {
    return { appId: "", permissions: 0, refreshToken: "" };
}
exports.TokenRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.appId !== "") {
            writer.uint32(10).string(message.appId);
        }
        if (message.permissions !== 0) {
            writer.uint32(16).uint32(message.permissions);
        }
        if (message.refreshToken !== "") {
            writer.uint32(26).string(message.refreshToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.appId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.permissions = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.refreshToken = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            appId: isSet(object.appId) ? globalThis.String(object.appId) : "",
            permissions: isSet(object.permissions) ? globalThis.Number(object.permissions) : 0,
            refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.appId !== "") {
            obj.appId = message.appId;
        }
        if (message.permissions !== 0) {
            obj.permissions = Math.round(message.permissions);
        }
        if (message.refreshToken !== "") {
            obj.refreshToken = message.refreshToken;
        }
        return obj;
    },
    create(base) {
        return exports.TokenRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTokenRequest();
        message.appId = object.appId ?? "";
        message.permissions = object.permissions ?? 0;
        message.refreshToken = object.refreshToken ?? "";
        return message;
    },
};
function createBaseNewAppRequest() {
    return { appId: "", contactEmail: "", appLink: undefined, permisisons: undefined };
}
exports.NewAppRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.appId !== "") {
            writer.uint32(10).string(message.appId);
        }
        if (message.contactEmail !== "") {
            writer.uint32(18).string(message.contactEmail);
        }
        if (message.appLink !== undefined) {
            writer.uint32(26).string(message.appLink);
        }
        if (message.permisisons !== undefined) {
            writer.uint32(32).uint32(message.permisisons);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNewAppRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.appId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.contactEmail = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.appLink = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.permisisons = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            appId: isSet(object.appId) ? globalThis.String(object.appId) : "",
            contactEmail: isSet(object.contactEmail) ? globalThis.String(object.contactEmail) : "",
            appLink: isSet(object.appLink) ? globalThis.String(object.appLink) : undefined,
            permisisons: isSet(object.permisisons) ? globalThis.Number(object.permisisons) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.appId !== "") {
            obj.appId = message.appId;
        }
        if (message.contactEmail !== "") {
            obj.contactEmail = message.contactEmail;
        }
        if (message.appLink !== undefined) {
            obj.appLink = message.appLink;
        }
        if (message.permisisons !== undefined) {
            obj.permisisons = Math.round(message.permisisons);
        }
        return obj;
    },
    create(base) {
        return exports.NewAppRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNewAppRequest();
        message.appId = object.appId ?? "";
        message.contactEmail = object.contactEmail ?? "";
        message.appLink = object.appLink ?? undefined;
        message.permisisons = object.permisisons ?? undefined;
        return message;
    },
};
function createBaseNewLoginThirdPartyRequest() {
    return { app: "", tpAppId: "" };
}
exports.NewLoginThirdPartyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.app !== "") {
            writer.uint32(10).string(message.app);
        }
        if (message.tpAppId !== "") {
            writer.uint32(18).string(message.tpAppId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNewLoginThirdPartyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.app = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.tpAppId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            app: isSet(object.app) ? globalThis.String(object.app) : "",
            tpAppId: isSet(object.tpAppId) ? globalThis.String(object.tpAppId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.app !== "") {
            obj.app = message.app;
        }
        if (message.tpAppId !== "") {
            obj.tpAppId = message.tpAppId;
        }
        return obj;
    },
    create(base) {
        return exports.NewLoginThirdPartyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNewLoginThirdPartyRequest();
        message.app = object.app ?? "";
        message.tpAppId = object.tpAppId ?? "";
        return message;
    },
};
function createBaseThirdPartyLoginResponse() {
    return { lupydTokens: undefined, appTokens: undefined };
}
exports.ThirdPartyLoginResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.lupydTokens !== undefined) {
            exports.UserTokens.encode(message.lupydTokens, writer.uint32(10).fork()).join();
        }
        if (message.appTokens !== undefined) {
            exports.UserTokens.encode(message.appTokens, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseThirdPartyLoginResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.lupydTokens = exports.UserTokens.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.appTokens = exports.UserTokens.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            lupydTokens: isSet(object.lupydTokens) ? exports.UserTokens.fromJSON(object.lupydTokens) : undefined,
            appTokens: isSet(object.appTokens) ? exports.UserTokens.fromJSON(object.appTokens) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.lupydTokens !== undefined) {
            obj.lupydTokens = exports.UserTokens.toJSON(message.lupydTokens);
        }
        if (message.appTokens !== undefined) {
            obj.appTokens = exports.UserTokens.toJSON(message.appTokens);
        }
        return obj;
    },
    create(base) {
        return exports.ThirdPartyLoginResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseThirdPartyLoginResponse();
        message.lupydTokens = (object.lupydTokens !== undefined && object.lupydTokens !== null)
            ? exports.UserTokens.fromPartial(object.lupydTokens)
            : undefined;
        message.appTokens = (object.appTokens !== undefined && object.appTokens !== null)
            ? exports.UserTokens.fromPartial(object.appTokens)
            : undefined;
        return message;
    },
};
function createBaseLoggedInApp() {
    return { app: "", aud: "", loggedInSince: 0n, lastTokenRefresh: 0n };
}
exports.LoggedInApp = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.app !== "") {
            writer.uint32(10).string(message.app);
        }
        if (message.aud !== "") {
            writer.uint32(18).string(message.aud);
        }
        if (message.loggedInSince !== 0n) {
            if (BigInt.asUintN(64, message.loggedInSince) !== message.loggedInSince) {
                throw new globalThis.Error("value provided for field message.loggedInSince of type uint64 too large");
            }
            writer.uint32(24).uint64(message.loggedInSince);
        }
        if (message.lastTokenRefresh !== 0n) {
            if (BigInt.asUintN(64, message.lastTokenRefresh) !== message.lastTokenRefresh) {
                throw new globalThis.Error("value provided for field message.lastTokenRefresh of type uint64 too large");
            }
            writer.uint32(32).uint64(message.lastTokenRefresh);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLoggedInApp();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.app = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.aud = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.loggedInSince = reader.uint64();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.lastTokenRefresh = reader.uint64();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            app: isSet(object.app) ? globalThis.String(object.app) : "",
            aud: isSet(object.aud) ? globalThis.String(object.aud) : "",
            loggedInSince: isSet(object.loggedInSince) ? BigInt(object.loggedInSince) : 0n,
            lastTokenRefresh: isSet(object.lastTokenRefresh) ? BigInt(object.lastTokenRefresh) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.app !== "") {
            obj.app = message.app;
        }
        if (message.aud !== "") {
            obj.aud = message.aud;
        }
        if (message.loggedInSince !== 0n) {
            obj.loggedInSince = message.loggedInSince.toString();
        }
        if (message.lastTokenRefresh !== 0n) {
            obj.lastTokenRefresh = message.lastTokenRefresh.toString();
        }
        return obj;
    },
    create(base) {
        return exports.LoggedInApp.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLoggedInApp();
        message.app = object.app ?? "";
        message.aud = object.aud ?? "";
        message.loggedInSince = object.loggedInSince ?? 0n;
        message.lastTokenRefresh = object.lastTokenRefresh ?? 0n;
        return message;
    },
};
function createBaseLoggedInApps() {
    return { apps: [] };
}
exports.LoggedInApps = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.apps) {
            exports.LoggedInApp.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLoggedInApps();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.apps.push(exports.LoggedInApp.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { apps: globalThis.Array.isArray(object?.apps) ? object.apps.map((e) => exports.LoggedInApp.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.apps?.length) {
            obj.apps = message.apps.map((e) => exports.LoggedInApp.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.LoggedInApps.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLoggedInApps();
        message.apps = object.apps?.map((e) => exports.LoggedInApp.fromPartial(e)) || [];
        return message;
    },
};
function createBaseLogoutToken() {
    return { token: "" };
}
exports.LogoutToken = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLogoutToken();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { token: isSet(object.token) ? globalThis.String(object.token) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.token !== "") {
            obj.token = message.token;
        }
        return obj;
    },
    create(base) {
        return exports.LogoutToken.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLogoutToken();
        message.token = object.token ?? "";
        return message;
    },
};
function createBaseLogoutTokens() {
    return { tokens: [] };
}
exports.LogoutTokens = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.tokens) {
            exports.LogoutToken.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLogoutTokens();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.tokens.push(exports.LogoutToken.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tokens: globalThis.Array.isArray(object?.tokens) ? object.tokens.map((e) => exports.LogoutToken.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tokens?.length) {
            obj.tokens = message.tokens.map((e) => exports.LogoutToken.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.LogoutTokens.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLogoutTokens();
        message.tokens = object.tokens?.map((e) => exports.LogoutToken.fromPartial(e)) || [];
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
