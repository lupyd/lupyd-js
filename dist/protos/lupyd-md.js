"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: lupyd-md.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Markdown = exports.Elements = exports.Element = exports.PrimitiveElement = exports.FileElement = exports.HyperElement = exports.HyperCustomElement = exports.hyperElementTypeToJSON = exports.hyperElementTypeFromJSON = exports.HyperElementType = exports.elementTypeToJSON = exports.elementTypeFromJSON = exports.ElementType = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "lupyd.markdown";
var ElementType;
(function (ElementType) {
    ElementType[ElementType["Normal"] = 0] = "Normal";
    ElementType[ElementType["Bold"] = 1] = "Bold";
    ElementType[ElementType["Italic"] = 2] = "Italic";
    ElementType[ElementType["Header"] = 4] = "Header";
    ElementType[ElementType["UnderLine"] = 8] = "UnderLine";
    ElementType[ElementType["Code"] = 16] = "Code";
    ElementType[ElementType["Quote"] = 32] = "Quote";
    ElementType[ElementType["Spoiler"] = 64] = "Spoiler";
    ElementType[ElementType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ElementType || (exports.ElementType = ElementType = {}));
function elementTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "Normal":
            return ElementType.Normal;
        case 1:
        case "Bold":
            return ElementType.Bold;
        case 2:
        case "Italic":
            return ElementType.Italic;
        case 4:
        case "Header":
            return ElementType.Header;
        case 8:
        case "UnderLine":
            return ElementType.UnderLine;
        case 16:
        case "Code":
            return ElementType.Code;
        case 32:
        case "Quote":
            return ElementType.Quote;
        case 64:
        case "Spoiler":
            return ElementType.Spoiler;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ElementType.UNRECOGNIZED;
    }
}
exports.elementTypeFromJSON = elementTypeFromJSON;
function elementTypeToJSON(object) {
    switch (object) {
        case ElementType.Normal:
            return "Normal";
        case ElementType.Bold:
            return "Bold";
        case ElementType.Italic:
            return "Italic";
        case ElementType.Header:
            return "Header";
        case ElementType.UnderLine:
            return "UnderLine";
        case ElementType.Code:
            return "Code";
        case ElementType.Quote:
            return "Quote";
        case ElementType.Spoiler:
            return "Spoiler";
        case ElementType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.elementTypeToJSON = elementTypeToJSON;
var HyperElementType;
(function (HyperElementType) {
    HyperElementType[HyperElementType["Mention"] = 0] = "Mention";
    HyperElementType[HyperElementType["HashTag"] = 1] = "HashTag";
    HyperElementType[HyperElementType["Post"] = 2] = "Post";
    HyperElementType[HyperElementType["Group"] = 3] = "Group";
    HyperElementType[HyperElementType["Link"] = 4] = "Link";
    HyperElementType[HyperElementType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(HyperElementType || (exports.HyperElementType = HyperElementType = {}));
function hyperElementTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "Mention":
            return HyperElementType.Mention;
        case 1:
        case "HashTag":
            return HyperElementType.HashTag;
        case 2:
        case "Post":
            return HyperElementType.Post;
        case 3:
        case "Group":
            return HyperElementType.Group;
        case 4:
        case "Link":
            return HyperElementType.Link;
        case -1:
        case "UNRECOGNIZED":
        default:
            return HyperElementType.UNRECOGNIZED;
    }
}
exports.hyperElementTypeFromJSON = hyperElementTypeFromJSON;
function hyperElementTypeToJSON(object) {
    switch (object) {
        case HyperElementType.Mention:
            return "Mention";
        case HyperElementType.HashTag:
            return "HashTag";
        case HyperElementType.Post:
            return "Post";
        case HyperElementType.Group:
            return "Group";
        case HyperElementType.Link:
            return "Link";
        case HyperElementType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.hyperElementTypeToJSON = hyperElementTypeToJSON;
function createBaseHyperCustomElement() {
    return { tag: "", body: "" };
}
exports.HyperCustomElement = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.tag !== "") {
            writer.uint32(10).string(message.tag);
        }
        if (message.body !== "") {
            writer.uint32(18).string(message.body);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHyperCustomElement();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.tag = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.body = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tag: isSet(object.tag) ? globalThis.String(object.tag) : "",
            body: isSet(object.body) ? globalThis.String(object.body) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tag !== "") {
            obj.tag = message.tag;
        }
        if (message.body !== "") {
            obj.body = message.body;
        }
        return obj;
    },
    create(base) {
        return exports.HyperCustomElement.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseHyperCustomElement();
        message.tag = object.tag ?? "";
        message.body = object.body ?? "";
        return message;
    },
};
function createBaseHyperElement() {
    return { tag: 0, body: "" };
}
exports.HyperElement = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.tag !== 0) {
            writer.uint32(8).int32(message.tag);
        }
        if (message.body !== "") {
            writer.uint32(18).string(message.body);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHyperElement();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.tag = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.body = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tag: isSet(object.tag) ? hyperElementTypeFromJSON(object.tag) : 0,
            body: isSet(object.body) ? globalThis.String(object.body) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tag !== 0) {
            obj.tag = hyperElementTypeToJSON(message.tag);
        }
        if (message.body !== "") {
            obj.body = message.body;
        }
        return obj;
    },
    create(base) {
        return exports.HyperElement.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseHyperElement();
        message.tag = object.tag ?? 0;
        message.body = object.body ?? "";
        return message;
    },
};
function createBaseFileElement() {
    return { filename: "", url: "", mimeType: "" };
}
exports.FileElement = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.filename !== "") {
            writer.uint32(10).string(message.filename);
        }
        if (message.url !== "") {
            writer.uint32(18).string(message.url);
        }
        if (message.mimeType !== "") {
            writer.uint32(26).string(message.mimeType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFileElement();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.filename = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.mimeType = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
            url: isSet(object.url) ? globalThis.String(object.url) : "",
            mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.filename !== "") {
            obj.filename = message.filename;
        }
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.mimeType !== "") {
            obj.mimeType = message.mimeType;
        }
        return obj;
    },
    create(base) {
        return exports.FileElement.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFileElement();
        message.filename = object.filename ?? "";
        message.url = object.url ?? "";
        message.mimeType = object.mimeType ?? "";
        return message;
    },
};
function createBasePrimitiveElement() {
    return { elementType: 0, text: "" };
}
exports.PrimitiveElement = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.elementType !== 0) {
            writer.uint32(8).uint32(message.elementType);
        }
        if (message.text !== "") {
            writer.uint32(18).string(message.text);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePrimitiveElement();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.elementType = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            elementType: isSet(object.elementType) ? globalThis.Number(object.elementType) : 0,
            text: isSet(object.text) ? globalThis.String(object.text) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.elementType !== 0) {
            obj.elementType = Math.round(message.elementType);
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        return obj;
    },
    create(base) {
        return exports.PrimitiveElement.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePrimitiveElement();
        message.elementType = object.elementType ?? 0;
        message.text = object.text ?? "";
        return message;
    },
};
function createBaseElement() {
    return {
        primitiveElement: undefined,
        hyperElement: undefined,
        hyperCustomElement: undefined,
        fileElement: undefined,
    };
}
exports.Element = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.primitiveElement !== undefined) {
            exports.PrimitiveElement.encode(message.primitiveElement, writer.uint32(10).fork()).join();
        }
        if (message.hyperElement !== undefined) {
            exports.HyperElement.encode(message.hyperElement, writer.uint32(18).fork()).join();
        }
        if (message.hyperCustomElement !== undefined) {
            exports.HyperCustomElement.encode(message.hyperCustomElement, writer.uint32(26).fork()).join();
        }
        if (message.fileElement !== undefined) {
            exports.FileElement.encode(message.fileElement, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseElement();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.primitiveElement = exports.PrimitiveElement.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.hyperElement = exports.HyperElement.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.hyperCustomElement = exports.HyperCustomElement.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.fileElement = exports.FileElement.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            primitiveElement: isSet(object.primitiveElement) ? exports.PrimitiveElement.fromJSON(object.primitiveElement) : undefined,
            hyperElement: isSet(object.hyperElement) ? exports.HyperElement.fromJSON(object.hyperElement) : undefined,
            hyperCustomElement: isSet(object.hyperCustomElement)
                ? exports.HyperCustomElement.fromJSON(object.hyperCustomElement)
                : undefined,
            fileElement: isSet(object.fileElement) ? exports.FileElement.fromJSON(object.fileElement) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.primitiveElement !== undefined) {
            obj.primitiveElement = exports.PrimitiveElement.toJSON(message.primitiveElement);
        }
        if (message.hyperElement !== undefined) {
            obj.hyperElement = exports.HyperElement.toJSON(message.hyperElement);
        }
        if (message.hyperCustomElement !== undefined) {
            obj.hyperCustomElement = exports.HyperCustomElement.toJSON(message.hyperCustomElement);
        }
        if (message.fileElement !== undefined) {
            obj.fileElement = exports.FileElement.toJSON(message.fileElement);
        }
        return obj;
    },
    create(base) {
        return exports.Element.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseElement();
        message.primitiveElement = (object.primitiveElement !== undefined && object.primitiveElement !== null)
            ? exports.PrimitiveElement.fromPartial(object.primitiveElement)
            : undefined;
        message.hyperElement = (object.hyperElement !== undefined && object.hyperElement !== null)
            ? exports.HyperElement.fromPartial(object.hyperElement)
            : undefined;
        message.hyperCustomElement = (object.hyperCustomElement !== undefined && object.hyperCustomElement !== null)
            ? exports.HyperCustomElement.fromPartial(object.hyperCustomElement)
            : undefined;
        message.fileElement = (object.fileElement !== undefined && object.fileElement !== null)
            ? exports.FileElement.fromPartial(object.fileElement)
            : undefined;
        return message;
    },
};
function createBaseElements() {
    return { elements: [] };
}
exports.Elements = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.elements) {
            exports.Element.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseElements();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.elements.push(exports.Element.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            elements: globalThis.Array.isArray(object?.elements) ? object.elements.map((e) => exports.Element.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.elements?.length) {
            obj.elements = message.elements.map((e) => exports.Element.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Elements.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseElements();
        message.elements = object.elements?.map((e) => exports.Element.fromPartial(e)) || [];
        return message;
    },
};
function createBaseMarkdown() {
    return { elements: undefined };
}
exports.Markdown = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.elements !== undefined) {
            exports.Elements.encode(message.elements, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMarkdown();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.elements = exports.Elements.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { elements: isSet(object.elements) ? exports.Elements.fromJSON(object.elements) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.elements !== undefined) {
            obj.elements = exports.Elements.toJSON(message.elements);
        }
        return obj;
    },
    create(base) {
        return exports.Markdown.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMarkdown();
        message.elements = (object.elements !== undefined && object.elements !== null)
            ? exports.Elements.fromPartial(object.elements)
            : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
