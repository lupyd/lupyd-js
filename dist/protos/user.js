"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.31.1
// source: user.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Relations = exports.Relation = exports.User = exports.UpdateUserInfo = exports.Users = exports.FullUsers = exports.FullUserWithProfile = exports.FullUser = exports.BoolValue = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const post_1 = require("./post");
exports.protobufPackage = "lupyd.user";
function createBaseBoolValue() {
    return { val: false };
}
exports.BoolValue = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.val !== false) {
            writer.uint32(8).bool(message.val);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBoolValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.val = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { val: isSet(object.val) ? globalThis.Boolean(object.val) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.val !== false) {
            obj.val = message.val;
        }
        return obj;
    },
    create(base) {
        return exports.BoolValue.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBoolValue();
        message.val = object.val ?? false;
        return message;
    },
};
function createBaseFullUser() {
    return { uname: "", bio: new Uint8Array(0), followers: 0, settings: 0, uid: "", credits: 0 };
}
exports.FullUser = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.uname !== "") {
            writer.uint32(10).string(message.uname);
        }
        if (message.bio.length !== 0) {
            writer.uint32(18).bytes(message.bio);
        }
        if (message.followers !== 0) {
            writer.uint32(24).int32(message.followers);
        }
        if (message.settings !== 0) {
            writer.uint32(32).int32(message.settings);
        }
        if (message.uid !== "") {
            writer.uint32(42).string(message.uid);
        }
        if (message.credits !== 0) {
            writer.uint32(53).float(message.credits);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFullUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.uname = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.bio = reader.bytes();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.followers = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.settings = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.uid = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 53) {
                        break;
                    }
                    message.credits = reader.float();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            uname: isSet(object.uname) ? globalThis.String(object.uname) : "",
            bio: isSet(object.bio) ? bytesFromBase64(object.bio) : new Uint8Array(0),
            followers: isSet(object.followers) ? globalThis.Number(object.followers) : 0,
            settings: isSet(object.settings) ? globalThis.Number(object.settings) : 0,
            uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
            credits: isSet(object.credits) ? globalThis.Number(object.credits) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.uname !== "") {
            obj.uname = message.uname;
        }
        if (message.bio.length !== 0) {
            obj.bio = base64FromBytes(message.bio);
        }
        if (message.followers !== 0) {
            obj.followers = Math.round(message.followers);
        }
        if (message.settings !== 0) {
            obj.settings = Math.round(message.settings);
        }
        if (message.uid !== "") {
            obj.uid = message.uid;
        }
        if (message.credits !== 0) {
            obj.credits = message.credits;
        }
        return obj;
    },
    create(base) {
        return exports.FullUser.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFullUser();
        message.uname = object.uname ?? "";
        message.bio = object.bio ?? new Uint8Array(0);
        message.followers = object.followers ?? 0;
        message.settings = object.settings ?? 0;
        message.uid = object.uid ?? "";
        message.credits = object.credits ?? 0;
        return message;
    },
};
function createBaseFullUserWithProfile() {
    return { user: undefined, pfp: undefined };
}
exports.FullUserWithProfile = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.user !== undefined) {
            exports.FullUser.encode(message.user, writer.uint32(10).fork()).join();
        }
        if (message.pfp !== undefined) {
            post_1.File.encode(message.pfp, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFullUserWithProfile();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.user = exports.FullUser.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.pfp = post_1.File.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user: isSet(object.user) ? exports.FullUser.fromJSON(object.user) : undefined,
            pfp: isSet(object.pfp) ? post_1.File.fromJSON(object.pfp) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.user !== undefined) {
            obj.user = exports.FullUser.toJSON(message.user);
        }
        if (message.pfp !== undefined) {
            obj.pfp = post_1.File.toJSON(message.pfp);
        }
        return obj;
    },
    create(base) {
        return exports.FullUserWithProfile.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFullUserWithProfile();
        message.user = (object.user !== undefined && object.user !== null) ? exports.FullUser.fromPartial(object.user) : undefined;
        message.pfp = (object.pfp !== undefined && object.pfp !== null) ? post_1.File.fromPartial(object.pfp) : undefined;
        return message;
    },
};
function createBaseFullUsers() {
    return { users: [] };
}
exports.FullUsers = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.users) {
            exports.FullUser.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFullUsers();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.users.push(exports.FullUser.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { users: globalThis.Array.isArray(object?.users) ? object.users.map((e) => exports.FullUser.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.users?.length) {
            obj.users = message.users.map((e) => exports.FullUser.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.FullUsers.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFullUsers();
        message.users = object.users?.map((e) => exports.FullUser.fromPartial(e)) || [];
        return message;
    },
};
function createBaseUsers() {
    return { users: [] };
}
exports.Users = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.users) {
            exports.User.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUsers();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.users.push(exports.User.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { users: globalThis.Array.isArray(object?.users) ? object.users.map((e) => exports.User.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.users?.length) {
            obj.users = message.users.map((e) => exports.User.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Users.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUsers();
        message.users = object.users?.map((e) => exports.User.fromPartial(e)) || [];
        return message;
    },
};
function createBaseUpdateUserInfo() {
    return { bio: undefined, settings: 0 };
}
exports.UpdateUserInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.bio !== undefined) {
            post_1.PostBody.encode(message.bio, writer.uint32(10).fork()).join();
        }
        if (message.settings !== 0) {
            writer.uint32(32).int32(message.settings);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateUserInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.bio = post_1.PostBody.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.settings = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            bio: isSet(object.bio) ? post_1.PostBody.fromJSON(object.bio) : undefined,
            settings: isSet(object.settings) ? globalThis.Number(object.settings) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.bio !== undefined) {
            obj.bio = post_1.PostBody.toJSON(message.bio);
        }
        if (message.settings !== 0) {
            obj.settings = Math.round(message.settings);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateUserInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateUserInfo();
        message.bio = (object.bio !== undefined && object.bio !== null) ? post_1.PostBody.fromPartial(object.bio) : undefined;
        message.settings = object.settings ?? 0;
        return message;
    },
};
function createBaseUser() {
    return { uname: "", bio: new Uint8Array(0), settings: 0, followers: 0 };
}
exports.User = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.uname !== "") {
            writer.uint32(10).string(message.uname);
        }
        if (message.bio.length !== 0) {
            writer.uint32(18).bytes(message.bio);
        }
        if (message.settings !== 0) {
            writer.uint32(24).int32(message.settings);
        }
        if (message.followers !== 0) {
            writer.uint32(32).int32(message.followers);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.uname = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.bio = reader.bytes();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.settings = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.followers = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            uname: isSet(object.uname) ? globalThis.String(object.uname) : "",
            bio: isSet(object.bio) ? bytesFromBase64(object.bio) : new Uint8Array(0),
            settings: isSet(object.settings) ? globalThis.Number(object.settings) : 0,
            followers: isSet(object.followers) ? globalThis.Number(object.followers) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.uname !== "") {
            obj.uname = message.uname;
        }
        if (message.bio.length !== 0) {
            obj.bio = base64FromBytes(message.bio);
        }
        if (message.settings !== 0) {
            obj.settings = Math.round(message.settings);
        }
        if (message.followers !== 0) {
            obj.followers = Math.round(message.followers);
        }
        return obj;
    },
    create(base) {
        return exports.User.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUser();
        message.uname = object.uname ?? "";
        message.bio = object.bio ?? new Uint8Array(0);
        message.settings = object.settings ?? 0;
        message.followers = object.followers ?? 0;
        return message;
    },
};
function createBaseRelation() {
    return { uname: "", relation: false };
}
exports.Relation = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.uname !== "") {
            writer.uint32(10).string(message.uname);
        }
        if (message.relation !== false) {
            writer.uint32(16).bool(message.relation);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRelation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.uname = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.relation = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            uname: isSet(object.uname) ? globalThis.String(object.uname) : "",
            relation: isSet(object.relation) ? globalThis.Boolean(object.relation) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.uname !== "") {
            obj.uname = message.uname;
        }
        if (message.relation !== false) {
            obj.relation = message.relation;
        }
        return obj;
    },
    create(base) {
        return exports.Relation.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRelation();
        message.uname = object.uname ?? "";
        message.relation = object.relation ?? false;
        return message;
    },
};
function createBaseRelations() {
    return { relations: [] };
}
exports.Relations = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.relations) {
            exports.Relation.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRelations();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.relations.push(exports.Relation.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            relations: globalThis.Array.isArray(object?.relations)
                ? object.relations.map((e) => exports.Relation.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.relations?.length) {
            obj.relations = message.relations.map((e) => exports.Relation.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Relations.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRelations();
        message.relations = object.relations?.map((e) => exports.Relation.fromPartial(e)) || [];
        return message;
    },
};
function bytesFromBase64(b64) {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
function base64FromBytes(arr) {
    const bin = [];
    arr.forEach((byte) => {
        bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
}
function isSet(value) {
    return value !== null && value !== undefined;
}
