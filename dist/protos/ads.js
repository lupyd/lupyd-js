"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: ads.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateAdRequest = exports.AdRequest = exports.AdResponse = exports.Ad = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "lupyd.ads";
function createBaseAd() {
    return { id: 0n, by: "", title: "", body: new Uint8Array(0) };
}
exports.Ad = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0n) {
            if (BigInt.asIntN(64, message.id) !== message.id) {
                throw new globalThis.Error("value provided for field message.id of type int64 too large");
            }
            writer.uint32(8).int64(message.id);
        }
        if (message.by !== "") {
            writer.uint32(18).string(message.by);
        }
        if (message.title !== "") {
            writer.uint32(26).string(message.title);
        }
        if (message.body.length !== 0) {
            writer.uint32(34).bytes(message.body);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAd();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int64();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.by = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.body = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? BigInt(object.id) : 0n,
            by: isSet(object.by) ? globalThis.String(object.by) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            body: isSet(object.body) ? bytesFromBase64(object.body) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0n) {
            obj.id = message.id.toString();
        }
        if (message.by !== "") {
            obj.by = message.by;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.body.length !== 0) {
            obj.body = base64FromBytes(message.body);
        }
        return obj;
    },
    create(base) {
        return exports.Ad.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAd();
        message.id = object.id ?? 0n;
        message.by = object.by ?? "";
        message.title = object.title ?? "";
        message.body = object.body ?? new Uint8Array(0);
        return message;
    },
};
function createBaseAdResponse() {
    return { ads: [] };
}
exports.AdResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.ads) {
            exports.Ad.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.ads.push(exports.Ad.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { ads: globalThis.Array.isArray(object?.ads) ? object.ads.map((e) => exports.Ad.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.ads?.length) {
            obj.ads = message.ads.map((e) => exports.Ad.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.AdResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAdResponse();
        message.ads = object.ads?.map((e) => exports.Ad.fromPartial(e)) || [];
        return message;
    },
};
function createBaseAdRequest() {
    return { tags: [], metadata: "" };
}
exports.AdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.tags) {
            writer.uint32(10).string(v);
        }
        if (message.metadata !== "") {
            writer.uint32(18).string(message.metadata);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.tags.push(reader.string());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.metadata = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e) => globalThis.String(e)) : [],
            metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tags?.length) {
            obj.tags = message.tags;
        }
        if (message.metadata !== "") {
            obj.metadata = message.metadata;
        }
        return obj;
    },
    create(base) {
        return exports.AdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAdRequest();
        message.tags = object.tags?.map((e) => e) || [];
        message.metadata = object.metadata ?? "";
        return message;
    },
};
function createBaseCreateAdRequest() {
    return { title: "", body: new Uint8Array(0), expiryTs: 0n, maxViews: 0n, maxClicks: 0n };
}
exports.CreateAdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.body.length !== 0) {
            writer.uint32(18).bytes(message.body);
        }
        if (message.expiryTs !== 0n) {
            if (BigInt.asUintN(64, message.expiryTs) !== message.expiryTs) {
                throw new globalThis.Error("value provided for field message.expiryTs of type uint64 too large");
            }
            writer.uint32(32).uint64(message.expiryTs);
        }
        if (message.maxViews !== 0n) {
            if (BigInt.asUintN(64, message.maxViews) !== message.maxViews) {
                throw new globalThis.Error("value provided for field message.maxViews of type uint64 too large");
            }
            writer.uint32(40).uint64(message.maxViews);
        }
        if (message.maxClicks !== 0n) {
            if (BigInt.asUintN(64, message.maxClicks) !== message.maxClicks) {
                throw new globalThis.Error("value provided for field message.maxClicks of type uint64 too large");
            }
            writer.uint32(48).uint64(message.maxClicks);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateAdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.body = reader.bytes();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.expiryTs = reader.uint64();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.maxViews = reader.uint64();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.maxClicks = reader.uint64();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            body: isSet(object.body) ? bytesFromBase64(object.body) : new Uint8Array(0),
            expiryTs: isSet(object.expiryTs) ? BigInt(object.expiryTs) : 0n,
            maxViews: isSet(object.maxViews) ? BigInt(object.maxViews) : 0n,
            maxClicks: isSet(object.maxClicks) ? BigInt(object.maxClicks) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.body.length !== 0) {
            obj.body = base64FromBytes(message.body);
        }
        if (message.expiryTs !== 0n) {
            obj.expiryTs = message.expiryTs.toString();
        }
        if (message.maxViews !== 0n) {
            obj.maxViews = message.maxViews.toString();
        }
        if (message.maxClicks !== 0n) {
            obj.maxClicks = message.maxClicks.toString();
        }
        return obj;
    },
    create(base) {
        return exports.CreateAdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateAdRequest();
        message.title = object.title ?? "";
        message.body = object.body ?? new Uint8Array(0);
        message.expiryTs = object.expiryTs ?? 0n;
        message.maxViews = object.maxViews ?? 0n;
        message.maxClicks = object.maxClicks ?? 0n;
        return message;
    },
};
function bytesFromBase64(b64) {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
function base64FromBytes(arr) {
    const bin = [];
    arr.forEach((byte) => {
        bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
}
function isSet(value) {
    return value !== null && value !== undefined;
}
