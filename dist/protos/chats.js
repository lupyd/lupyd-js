"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: chats.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatKey = exports.ChatKeys = exports.ChatSessions = exports.ChatSession = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "lupyd.chat";
function createBaseChatSession() {
    return { ts: 0n, version: 0, user1: "", user2: "" };
}
exports.ChatSession = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.ts !== 0n) {
            if (BigInt.asUintN(64, message.ts) !== message.ts) {
                throw new globalThis.Error("value provided for field message.ts of type uint64 too large");
            }
            writer.uint32(8).uint64(message.ts);
        }
        if (message.version !== 0) {
            writer.uint32(16).uint32(message.version);
        }
        if (message.user1 !== "") {
            writer.uint32(26).string(message.user1);
        }
        if (message.user2 !== "") {
            writer.uint32(34).string(message.user2);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChatSession();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.ts = reader.uint64();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.version = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.user1 = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.user2 = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ts: isSet(object.ts) ? BigInt(object.ts) : 0n,
            version: isSet(object.version) ? globalThis.Number(object.version) : 0,
            user1: isSet(object.user1) ? globalThis.String(object.user1) : "",
            user2: isSet(object.user2) ? globalThis.String(object.user2) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.ts !== 0n) {
            obj.ts = message.ts.toString();
        }
        if (message.version !== 0) {
            obj.version = Math.round(message.version);
        }
        if (message.user1 !== "") {
            obj.user1 = message.user1;
        }
        if (message.user2 !== "") {
            obj.user2 = message.user2;
        }
        return obj;
    },
    create(base) {
        return exports.ChatSession.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseChatSession();
        message.ts = object.ts ?? 0n;
        message.version = object.version ?? 0;
        message.user1 = object.user1 ?? "";
        message.user2 = object.user2 ?? "";
        return message;
    },
};
function createBaseChatSessions() {
    return { sessions: [] };
}
exports.ChatSessions = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.sessions) {
            exports.ChatSession.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChatSessions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sessions.push(exports.ChatSession.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sessions: globalThis.Array.isArray(object?.sessions)
                ? object.sessions.map((e) => exports.ChatSession.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sessions?.length) {
            obj.sessions = message.sessions.map((e) => exports.ChatSession.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ChatSessions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseChatSessions();
        message.sessions = object.sessions?.map((e) => exports.ChatSession.fromPartial(e)) || [];
        return message;
    },
};
function createBaseChatKeys() {
    return { keys: [] };
}
exports.ChatKeys = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.keys) {
            writer.uint32(10).bytes(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChatKeys();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.keys.push(reader.bytes());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { keys: globalThis.Array.isArray(object?.keys) ? object.keys.map((e) => bytesFromBase64(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.keys?.length) {
            obj.keys = message.keys.map((e) => base64FromBytes(e));
        }
        return obj;
    },
    create(base) {
        return exports.ChatKeys.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseChatKeys();
        message.keys = object.keys?.map((e) => e) || [];
        return message;
    },
};
function createBaseChatKey() {
    return { key: new Uint8Array(0) };
}
exports.ChatKey = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key.length !== 0) {
            writer.uint32(10).bytes(message.key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChatKey();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(0) };
    },
    toJSON(message) {
        const obj = {};
        if (message.key.length !== 0) {
            obj.key = base64FromBytes(message.key);
        }
        return obj;
    },
    create(base) {
        return exports.ChatKey.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseChatKey();
        message.key = object.key ?? new Uint8Array(0);
        return message;
    },
};
function bytesFromBase64(b64) {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
function base64FromBytes(arr) {
    const bin = [];
    arr.forEach((byte) => {
        bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
}
function isSet(value) {
    return value !== null && value !== undefined;
}
