"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: credits.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.WithdrawCredits = exports.AddCredits = exports.PurchaseRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "lupyd.credits";
function createBasePurchaseRequest() {
    return { from: "", by: "", credits: 0, productId: 0n };
}
exports.PurchaseRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.from !== "") {
            writer.uint32(10).string(message.from);
        }
        if (message.by !== "") {
            writer.uint32(18).string(message.by);
        }
        if (message.credits !== 0) {
            writer.uint32(25).double(message.credits);
        }
        if (message.productId !== 0n) {
            if (BigInt.asIntN(64, message.productId) !== message.productId) {
                throw new globalThis.Error("value provided for field message.productId of type int64 too large");
            }
            writer.uint32(32).int64(message.productId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePurchaseRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.from = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.by = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 25) {
                        break;
                    }
                    message.credits = reader.double();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.productId = reader.int64();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            from: isSet(object.from) ? globalThis.String(object.from) : "",
            by: isSet(object.by) ? globalThis.String(object.by) : "",
            credits: isSet(object.credits) ? globalThis.Number(object.credits) : 0,
            productId: isSet(object.productId) ? BigInt(object.productId) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.from !== "") {
            obj.from = message.from;
        }
        if (message.by !== "") {
            obj.by = message.by;
        }
        if (message.credits !== 0) {
            obj.credits = message.credits;
        }
        if (message.productId !== 0n) {
            obj.productId = message.productId.toString();
        }
        return obj;
    },
    create(base) {
        return exports.PurchaseRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePurchaseRequest();
        message.from = object.from ?? "";
        message.by = object.by ?? "";
        message.credits = object.credits ?? 0;
        message.productId = object.productId ?? 0n;
        return message;
    },
};
function createBaseAddCredits() {
    return { from: "", to: "", credits: 0 };
}
exports.AddCredits = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.from !== "") {
            writer.uint32(10).string(message.from);
        }
        if (message.to !== "") {
            writer.uint32(18).string(message.to);
        }
        if (message.credits !== 0) {
            writer.uint32(25).double(message.credits);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddCredits();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.from = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.to = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 25) {
                        break;
                    }
                    message.credits = reader.double();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            from: isSet(object.from) ? globalThis.String(object.from) : "",
            to: isSet(object.to) ? globalThis.String(object.to) : "",
            credits: isSet(object.credits) ? globalThis.Number(object.credits) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.from !== "") {
            obj.from = message.from;
        }
        if (message.to !== "") {
            obj.to = message.to;
        }
        if (message.credits !== 0) {
            obj.credits = message.credits;
        }
        return obj;
    },
    create(base) {
        return exports.AddCredits.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddCredits();
        message.from = object.from ?? "";
        message.to = object.to ?? "";
        message.credits = object.credits ?? 0;
        return message;
    },
};
function createBaseWithdrawCredits() {
    return { credits: 0, by: "" };
}
exports.WithdrawCredits = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.credits !== 0) {
            writer.uint32(9).double(message.credits);
        }
        if (message.by !== "") {
            writer.uint32(18).string(message.by);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWithdrawCredits();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 9) {
                        break;
                    }
                    message.credits = reader.double();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.by = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            credits: isSet(object.credits) ? globalThis.Number(object.credits) : 0,
            by: isSet(object.by) ? globalThis.String(object.by) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.credits !== 0) {
            obj.credits = message.credits;
        }
        if (message.by !== "") {
            obj.by = message.by;
        }
        return obj;
    },
    create(base) {
        return exports.WithdrawCredits.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWithdrawCredits();
        message.credits = object.credits ?? 0;
        message.by = object.by ?? "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
