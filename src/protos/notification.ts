// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.31.1
// source: notification.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "lupyd.notification";

export interface NotificationType {
  follow?: FollowType | undefined;
  comment?: CommentType | undefined;
  like?: LikeType | undefined;
}

export interface FollowType {
  uname: string;
}

export interface CommentType {
  postId: string;
  commentedBy: string;
}

export interface LikeType {
  postId: string;
  likedBy: string;
}

export interface Notification {
  id: Uint8Array;
  seen: boolean;
  notificationType: NotificationType | undefined;
}

export interface Notifications {
  notifications: Notification[];
}

function createBaseNotificationType(): NotificationType {
  return { follow: undefined, comment: undefined, like: undefined };
}

export const NotificationType: MessageFns<NotificationType> = {
  encode(message: NotificationType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.follow !== undefined) {
      FollowType.encode(message.follow, writer.uint32(10).fork()).join();
    }
    if (message.comment !== undefined) {
      CommentType.encode(message.comment, writer.uint32(18).fork()).join();
    }
    if (message.like !== undefined) {
      LikeType.encode(message.like, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NotificationType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotificationType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.follow = FollowType.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.comment = CommentType.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.like = LikeType.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NotificationType {
    return {
      follow: isSet(object.follow) ? FollowType.fromJSON(object.follow) : undefined,
      comment: isSet(object.comment) ? CommentType.fromJSON(object.comment) : undefined,
      like: isSet(object.like) ? LikeType.fromJSON(object.like) : undefined,
    };
  },

  toJSON(message: NotificationType): unknown {
    const obj: any = {};
    if (message.follow !== undefined) {
      obj.follow = FollowType.toJSON(message.follow);
    }
    if (message.comment !== undefined) {
      obj.comment = CommentType.toJSON(message.comment);
    }
    if (message.like !== undefined) {
      obj.like = LikeType.toJSON(message.like);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NotificationType>, I>>(base?: I): NotificationType {
    return NotificationType.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NotificationType>, I>>(object: I): NotificationType {
    const message = createBaseNotificationType();
    message.follow = (object.follow !== undefined && object.follow !== null)
      ? FollowType.fromPartial(object.follow)
      : undefined;
    message.comment = (object.comment !== undefined && object.comment !== null)
      ? CommentType.fromPartial(object.comment)
      : undefined;
    message.like = (object.like !== undefined && object.like !== null) ? LikeType.fromPartial(object.like) : undefined;
    return message;
  },
};

function createBaseFollowType(): FollowType {
  return { uname: "" };
}

export const FollowType: MessageFns<FollowType> = {
  encode(message: FollowType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uname !== "") {
      writer.uint32(10).string(message.uname);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FollowType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFollowType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uname = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FollowType {
    return { uname: isSet(object.uname) ? globalThis.String(object.uname) : "" };
  },

  toJSON(message: FollowType): unknown {
    const obj: any = {};
    if (message.uname !== "") {
      obj.uname = message.uname;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FollowType>, I>>(base?: I): FollowType {
    return FollowType.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FollowType>, I>>(object: I): FollowType {
    const message = createBaseFollowType();
    message.uname = object.uname ?? "";
    return message;
  },
};

function createBaseCommentType(): CommentType {
  return { postId: "", commentedBy: "" };
}

export const CommentType: MessageFns<CommentType> = {
  encode(message: CommentType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.postId !== "") {
      writer.uint32(10).string(message.postId);
    }
    if (message.commentedBy !== "") {
      writer.uint32(18).string(message.commentedBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommentType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommentType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.postId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.commentedBy = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommentType {
    return {
      postId: isSet(object.postId) ? globalThis.String(object.postId) : "",
      commentedBy: isSet(object.commentedBy) ? globalThis.String(object.commentedBy) : "",
    };
  },

  toJSON(message: CommentType): unknown {
    const obj: any = {};
    if (message.postId !== "") {
      obj.postId = message.postId;
    }
    if (message.commentedBy !== "") {
      obj.commentedBy = message.commentedBy;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommentType>, I>>(base?: I): CommentType {
    return CommentType.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommentType>, I>>(object: I): CommentType {
    const message = createBaseCommentType();
    message.postId = object.postId ?? "";
    message.commentedBy = object.commentedBy ?? "";
    return message;
  },
};

function createBaseLikeType(): LikeType {
  return { postId: "", likedBy: "" };
}

export const LikeType: MessageFns<LikeType> = {
  encode(message: LikeType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.postId !== "") {
      writer.uint32(10).string(message.postId);
    }
    if (message.likedBy !== "") {
      writer.uint32(18).string(message.likedBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LikeType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLikeType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.postId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.likedBy = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LikeType {
    return {
      postId: isSet(object.postId) ? globalThis.String(object.postId) : "",
      likedBy: isSet(object.likedBy) ? globalThis.String(object.likedBy) : "",
    };
  },

  toJSON(message: LikeType): unknown {
    const obj: any = {};
    if (message.postId !== "") {
      obj.postId = message.postId;
    }
    if (message.likedBy !== "") {
      obj.likedBy = message.likedBy;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LikeType>, I>>(base?: I): LikeType {
    return LikeType.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LikeType>, I>>(object: I): LikeType {
    const message = createBaseLikeType();
    message.postId = object.postId ?? "";
    message.likedBy = object.likedBy ?? "";
    return message;
  },
};

function createBaseNotification(): Notification {
  return { id: new Uint8Array(0), seen: false, notificationType: undefined };
}

export const Notification: MessageFns<Notification> = {
  encode(message: Notification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id.length !== 0) {
      writer.uint32(10).bytes(message.id);
    }
    if (message.seen !== false) {
      writer.uint32(16).bool(message.seen);
    }
    if (message.notificationType !== undefined) {
      NotificationType.encode(message.notificationType, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Notification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.seen = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.notificationType = NotificationType.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Notification {
    return {
      id: isSet(object.id) ? bytesFromBase64(object.id) : new Uint8Array(0),
      seen: isSet(object.seen) ? globalThis.Boolean(object.seen) : false,
      notificationType: isSet(object.notificationType) ? NotificationType.fromJSON(object.notificationType) : undefined,
    };
  },

  toJSON(message: Notification): unknown {
    const obj: any = {};
    if (message.id.length !== 0) {
      obj.id = base64FromBytes(message.id);
    }
    if (message.seen !== false) {
      obj.seen = message.seen;
    }
    if (message.notificationType !== undefined) {
      obj.notificationType = NotificationType.toJSON(message.notificationType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Notification>, I>>(base?: I): Notification {
    return Notification.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Notification>, I>>(object: I): Notification {
    const message = createBaseNotification();
    message.id = object.id ?? new Uint8Array(0);
    message.seen = object.seen ?? false;
    message.notificationType = (object.notificationType !== undefined && object.notificationType !== null)
      ? NotificationType.fromPartial(object.notificationType)
      : undefined;
    return message;
  },
};

function createBaseNotifications(): Notifications {
  return { notifications: [] };
}

export const Notifications: MessageFns<Notifications> = {
  encode(message: Notifications, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.notifications) {
      Notification.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Notifications {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotifications();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.notifications.push(Notification.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Notifications {
    return {
      notifications: globalThis.Array.isArray(object?.notifications)
        ? object.notifications.map((e: any) => Notification.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Notifications): unknown {
    const obj: any = {};
    if (message.notifications?.length) {
      obj.notifications = message.notifications.map((e) => Notification.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Notifications>, I>>(base?: I): Notifications {
    return Notifications.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Notifications>, I>>(object: I): Notifications {
    const message = createBaseNotifications();
    message.notifications = object.notifications?.map((e) => Notification.fromPartial(e)) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  const bin = globalThis.atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  arr.forEach((byte) => {
    bin.push(globalThis.String.fromCharCode(byte));
  });
  return globalThis.btoa(bin.join(""));
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
