// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: credits.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "lupyd.credits";

export interface PurchaseRequest {
  from: string;
  by: string;
  credits: number;
  productId: bigint;
}

export interface AddCredits {
  from: string;
  to: string;
  credits: number;
}

export interface WithdrawCredits {
  credits: number;
  by: string;
}

function createBasePurchaseRequest(): PurchaseRequest {
  return { from: "", by: "", credits: 0, productId: 0n };
}

export const PurchaseRequest: MessageFns<PurchaseRequest> = {
  encode(message: PurchaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.from !== "") {
      writer.uint32(10).string(message.from);
    }
    if (message.by !== "") {
      writer.uint32(18).string(message.by);
    }
    if (message.credits !== 0) {
      writer.uint32(25).double(message.credits);
    }
    if (message.productId !== 0n) {
      if (BigInt.asIntN(64, message.productId) !== message.productId) {
        throw new globalThis.Error("value provided for field message.productId of type int64 too large");
      }
      writer.uint32(32).int64(message.productId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PurchaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePurchaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.from = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.by = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.credits = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.productId = reader.int64() as bigint;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PurchaseRequest {
    return {
      from: isSet(object.from) ? globalThis.String(object.from) : "",
      by: isSet(object.by) ? globalThis.String(object.by) : "",
      credits: isSet(object.credits) ? globalThis.Number(object.credits) : 0,
      productId: isSet(object.productId) ? BigInt(object.productId) : 0n,
    };
  },

  toJSON(message: PurchaseRequest): unknown {
    const obj: any = {};
    if (message.from !== "") {
      obj.from = message.from;
    }
    if (message.by !== "") {
      obj.by = message.by;
    }
    if (message.credits !== 0) {
      obj.credits = message.credits;
    }
    if (message.productId !== 0n) {
      obj.productId = message.productId.toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PurchaseRequest>, I>>(base?: I): PurchaseRequest {
    return PurchaseRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PurchaseRequest>, I>>(object: I): PurchaseRequest {
    const message = createBasePurchaseRequest();
    message.from = object.from ?? "";
    message.by = object.by ?? "";
    message.credits = object.credits ?? 0;
    message.productId = object.productId ?? 0n;
    return message;
  },
};

function createBaseAddCredits(): AddCredits {
  return { from: "", to: "", credits: 0 };
}

export const AddCredits: MessageFns<AddCredits> = {
  encode(message: AddCredits, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.from !== "") {
      writer.uint32(10).string(message.from);
    }
    if (message.to !== "") {
      writer.uint32(18).string(message.to);
    }
    if (message.credits !== 0) {
      writer.uint32(25).double(message.credits);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddCredits {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCredits();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.from = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.to = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.credits = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCredits {
    return {
      from: isSet(object.from) ? globalThis.String(object.from) : "",
      to: isSet(object.to) ? globalThis.String(object.to) : "",
      credits: isSet(object.credits) ? globalThis.Number(object.credits) : 0,
    };
  },

  toJSON(message: AddCredits): unknown {
    const obj: any = {};
    if (message.from !== "") {
      obj.from = message.from;
    }
    if (message.to !== "") {
      obj.to = message.to;
    }
    if (message.credits !== 0) {
      obj.credits = message.credits;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddCredits>, I>>(base?: I): AddCredits {
    return AddCredits.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddCredits>, I>>(object: I): AddCredits {
    const message = createBaseAddCredits();
    message.from = object.from ?? "";
    message.to = object.to ?? "";
    message.credits = object.credits ?? 0;
    return message;
  },
};

function createBaseWithdrawCredits(): WithdrawCredits {
  return { credits: 0, by: "" };
}

export const WithdrawCredits: MessageFns<WithdrawCredits> = {
  encode(message: WithdrawCredits, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.credits !== 0) {
      writer.uint32(9).double(message.credits);
    }
    if (message.by !== "") {
      writer.uint32(18).string(message.by);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WithdrawCredits {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWithdrawCredits();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.credits = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.by = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WithdrawCredits {
    return {
      credits: isSet(object.credits) ? globalThis.Number(object.credits) : 0,
      by: isSet(object.by) ? globalThis.String(object.by) : "",
    };
  },

  toJSON(message: WithdrawCredits): unknown {
    const obj: any = {};
    if (message.credits !== 0) {
      obj.credits = message.credits;
    }
    if (message.by !== "") {
      obj.by = message.by;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WithdrawCredits>, I>>(base?: I): WithdrawCredits {
    return WithdrawCredits.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WithdrawCredits>, I>>(object: I): WithdrawCredits {
    const message = createBaseWithdrawCredits();
    message.credits = object.credits ?? 0;
    message.by = object.by ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
