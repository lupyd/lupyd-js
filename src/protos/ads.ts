// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: ads.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "lupyd.ads";

export interface Ad {
  id: bigint;
  by: string;
  title: string;
  body: Uint8Array;
}

export interface AdResponse {
  ads: Ad[];
}

export interface AdRequest {
  tags: string[];
  metadata: string;
}

export interface CreateAdRequest {
  title: string;
  body: Uint8Array;
  expiryTs: bigint;
  maxViews: bigint;
  maxClicks: bigint;
}

function createBaseAd(): Ad {
  return { id: 0n, by: "", title: "", body: new Uint8Array(0) };
}

export const Ad: MessageFns<Ad> = {
  encode(message: Ad, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0n) {
      if (BigInt.asIntN(64, message.id) !== message.id) {
        throw new globalThis.Error("value provided for field message.id of type int64 too large");
      }
      writer.uint32(8).int64(message.id);
    }
    if (message.by !== "") {
      writer.uint32(18).string(message.by);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.body.length !== 0) {
      writer.uint32(34).bytes(message.body);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Ad {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64() as bigint;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.by = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.body = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Ad {
    return {
      id: isSet(object.id) ? BigInt(object.id) : 0n,
      by: isSet(object.by) ? globalThis.String(object.by) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      body: isSet(object.body) ? bytesFromBase64(object.body) : new Uint8Array(0),
    };
  },

  toJSON(message: Ad): unknown {
    const obj: any = {};
    if (message.id !== 0n) {
      obj.id = message.id.toString();
    }
    if (message.by !== "") {
      obj.by = message.by;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.body.length !== 0) {
      obj.body = base64FromBytes(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Ad>, I>>(base?: I): Ad {
    return Ad.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Ad>, I>>(object: I): Ad {
    const message = createBaseAd();
    message.id = object.id ?? 0n;
    message.by = object.by ?? "";
    message.title = object.title ?? "";
    message.body = object.body ?? new Uint8Array(0);
    return message;
  },
};

function createBaseAdResponse(): AdResponse {
  return { ads: [] };
}

export const AdResponse: MessageFns<AdResponse> = {
  encode(message: AdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.ads) {
      Ad.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ads.push(Ad.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdResponse {
    return { ads: globalThis.Array.isArray(object?.ads) ? object.ads.map((e: any) => Ad.fromJSON(e)) : [] };
  },

  toJSON(message: AdResponse): unknown {
    const obj: any = {};
    if (message.ads?.length) {
      obj.ads = message.ads.map((e) => Ad.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AdResponse>, I>>(base?: I): AdResponse {
    return AdResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AdResponse>, I>>(object: I): AdResponse {
    const message = createBaseAdResponse();
    message.ads = object.ads?.map((e) => Ad.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAdRequest(): AdRequest {
  return { tags: [], metadata: "" };
}

export const AdRequest: MessageFns<AdRequest> = {
  encode(message: AdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tags) {
      writer.uint32(10).string(v!);
    }
    if (message.metadata !== "") {
      writer.uint32(18).string(message.metadata);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdRequest {
    return {
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
    };
  },

  toJSON(message: AdRequest): unknown {
    const obj: any = {};
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AdRequest>, I>>(base?: I): AdRequest {
    return AdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AdRequest>, I>>(object: I): AdRequest {
    const message = createBaseAdRequest();
    message.tags = object.tags?.map((e) => e) || [];
    message.metadata = object.metadata ?? "";
    return message;
  },
};

function createBaseCreateAdRequest(): CreateAdRequest {
  return { title: "", body: new Uint8Array(0), expiryTs: 0n, maxViews: 0n, maxClicks: 0n };
}

export const CreateAdRequest: MessageFns<CreateAdRequest> = {
  encode(message: CreateAdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.body.length !== 0) {
      writer.uint32(18).bytes(message.body);
    }
    if (message.expiryTs !== 0n) {
      if (BigInt.asUintN(64, message.expiryTs) !== message.expiryTs) {
        throw new globalThis.Error("value provided for field message.expiryTs of type uint64 too large");
      }
      writer.uint32(32).uint64(message.expiryTs);
    }
    if (message.maxViews !== 0n) {
      if (BigInt.asUintN(64, message.maxViews) !== message.maxViews) {
        throw new globalThis.Error("value provided for field message.maxViews of type uint64 too large");
      }
      writer.uint32(40).uint64(message.maxViews);
    }
    if (message.maxClicks !== 0n) {
      if (BigInt.asUintN(64, message.maxClicks) !== message.maxClicks) {
        throw new globalThis.Error("value provided for field message.maxClicks of type uint64 too large");
      }
      writer.uint32(48).uint64(message.maxClicks);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.expiryTs = reader.uint64() as bigint;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.maxViews = reader.uint64() as bigint;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.maxClicks = reader.uint64() as bigint;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAdRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      body: isSet(object.body) ? bytesFromBase64(object.body) : new Uint8Array(0),
      expiryTs: isSet(object.expiryTs) ? BigInt(object.expiryTs) : 0n,
      maxViews: isSet(object.maxViews) ? BigInt(object.maxViews) : 0n,
      maxClicks: isSet(object.maxClicks) ? BigInt(object.maxClicks) : 0n,
    };
  },

  toJSON(message: CreateAdRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.body.length !== 0) {
      obj.body = base64FromBytes(message.body);
    }
    if (message.expiryTs !== 0n) {
      obj.expiryTs = message.expiryTs.toString();
    }
    if (message.maxViews !== 0n) {
      obj.maxViews = message.maxViews.toString();
    }
    if (message.maxClicks !== 0n) {
      obj.maxClicks = message.maxClicks.toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAdRequest>, I>>(base?: I): CreateAdRequest {
    return CreateAdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAdRequest>, I>>(object: I): CreateAdRequest {
    const message = createBaseCreateAdRequest();
    message.title = object.title ?? "";
    message.body = object.body ?? new Uint8Array(0);
    message.expiryTs = object.expiryTs ?? 0n;
    message.maxViews = object.maxViews ?? 0n;
    message.maxClicks = object.maxClicks ?? 0n;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  const bin = globalThis.atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  arr.forEach((byte) => {
    bin.push(globalThis.String.fromCharCode(byte));
  });
  return globalThis.btoa(bin.join(""));
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
